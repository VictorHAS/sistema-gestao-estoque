// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id              String   @id @default(uuid())
  email           String   @unique
  senha           String
  nome            String
  cargo           Cargo    @default(FUNCIONARIO)
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt
  compras         Compra[]
  vendas          Venda[]

  @@map("usuarios")
}

enum Cargo {
  ADMIN
  GERENTE
  FUNCIONARIO

  @@map("cargos")
}

model Produto {
  id              String              @id @default(uuid())
  nome            String
  descricao       String?
  codigo          String              @unique
  preco           Float
  categoriaId     String
  categoria       Categoria           @relation(fields: [categoriaId], references: [id])
  dataCriacao     DateTime            @default(now())
  dataAtualizacao DateTime            @updatedAt
  estoque         Estoque[]
  itensCompra     ItemCompra[]
  itensVenda      ItemVenda[]
  fornecedores    ProdutoFornecedor[]

  @@map("produtos")
}

model Categoria {
  id              String    @id @default(uuid())
  nome            String    @unique
  produtos        Produto[]
  dataCriacao     DateTime  @default(now())
  dataAtualizacao DateTime  @updatedAt

  @@map("categorias")
}

model Fornecedor {
  id              String              @id @default(uuid())
  nome            String
  email           String              @unique
  telefone        String?
  endereco        String?
  dataCriacao     DateTime            @default(now())
  dataAtualizacao DateTime            @updatedAt
  produtos        ProdutoFornecedor[]
  compras         Compra[]

  @@map("fornecedores")
}

model ProdutoFornecedor {
  fornecedorId    String
  produtoId       String
  fornecedor      Fornecedor @relation(fields: [fornecedorId], references: [id])
  produto         Produto    @relation(fields: [produtoId], references: [id])
  dataCriacao     DateTime   @default(now())
  dataAtualizacao DateTime   @updatedAt

  @@id([fornecedorId, produtoId])
  @@map("produtos_fornecedores")
}

model Deposito {
  id              String    @id @default(uuid())
  nome            String
  localizacao     String
  dataCriacao     DateTime  @default(now())
  dataAtualizacao DateTime  @updatedAt
  estoque         Estoque[]

  @@map("depositos")
}

model Estoque {
  id              String   @id @default(uuid())
  produtoId       String
  depositoId      String
  quantidade      Int
  produto         Produto  @relation(fields: [produtoId], references: [id])
  deposito        Deposito @relation(fields: [depositoId], references: [id])
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  @@unique([produtoId, depositoId])
  @@map("estoque")
}

model Compra {
  id              String       @id @default(uuid())
  fornecedorId    String
  usuarioId       String
  dataCompra      DateTime     @default(now())
  status          StatusPedido @default(PENDENTE)
  valorTotal      Float
  fornecedor      Fornecedor   @relation(fields: [fornecedorId], references: [id])
  usuario         Usuario      @relation(fields: [usuarioId], references: [id])
  itens           ItemCompra[]
  dataCriacao     DateTime     @default(now())
  dataAtualizacao DateTime     @updatedAt

  @@map("compras")
}

model ItemCompra {
  id              String   @id @default(uuid())
  compraId        String
  produtoId       String
  quantidade      Int
  precoUnitario   Float
  compra          Compra   @relation(fields: [compraId], references: [id], onDelete: Cascade)
  produto         Produto  @relation(fields: [produtoId], references: [id])
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  @@map("itens_compra")
}

model Venda {
  id              String       @id @default(uuid())
  usuarioId       String
  dataVenda       DateTime     @default(now())
  status          StatusPedido @default(PENDENTE)
  valorTotal      Float
  usuario         Usuario      @relation(fields: [usuarioId], references: [id])
  itens           ItemVenda[]
  dataCriacao     DateTime     @default(now())
  dataAtualizacao DateTime     @updatedAt

  @@map("vendas")
}

model ItemVenda {
  id              String   @id @default(uuid())
  vendaId         String
  produtoId       String
  quantidade      Int
  precoUnitario   Float
  venda           Venda    @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  produto         Produto  @relation(fields: [produtoId], references: [id])
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  @@map("itens_venda")
}

enum StatusPedido {
  PENDENTE
  CONCLUIDO
  CANCELADO

  @@map("status_pedido")
}
