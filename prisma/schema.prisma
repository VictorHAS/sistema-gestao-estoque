generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  role      UserRole   @default(STAFF)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
  sales     Sale[]
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String?
  code          String           @unique
  price         Float
  categoryId    String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  category      Category         @relation(fields: [categoryId], references: [id])
  stock         Stock[]
  purchaseItems PurchaseItem[]
  saleItems     SaleItem[]
  suppliers     ProductSupplier[]
}

model Supplier {
  id          String           @id @default(uuid())
  name        String
  email       String           @unique
  phone       String?
  address     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  products    ProductSupplier[]
  purchases   Purchase[]
}

model ProductSupplier {
  supplierId  String
  productId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  supplier    Supplier         @relation(fields: [supplierId], references: [id])
  product     Product          @relation(fields: [productId], references: [id])

  @@id([supplierId, productId])
}

model Warehouse {
  id        String     @id @default(uuid())
  name      String
  location  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  stock     Stock[]
}

model Stock {
  id          String     @id @default(uuid())
  productId   String
  warehouseId String
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  product     Product    @relation(fields: [productId], references: [id])
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
}

model Purchase {
  id            String         @id @default(uuid())
  supplierId    String
  userId        String
  purchaseDate  DateTime       @default(now())
  status        OrderStatus    @default(PENDING)
  total         Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  supplier      Supplier       @relation(fields: [supplierId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  items         PurchaseItem[]
}

model PurchaseItem {
  id            String     @id @default(uuid())
  purchaseId    String
  productId     String
  quantity      Int
  unitPrice     Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  purchase      Purchase   @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product       Product    @relation(fields: [productId], references: [id])
}

model Sale {
  id          String       @id @default(uuid())
  userId      String
  saleDate    DateTime     @default(now())
  status      OrderStatus  @default(PENDING)
  total       Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  items       SaleItem[]
}

model SaleItem {
  id          String     @id @default(uuid())
  saleId      String
  productId   String
  quantity    Int
  unitPrice   Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  sale        Sale       @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product    @relation(fields: [productId], references: [id])
}
